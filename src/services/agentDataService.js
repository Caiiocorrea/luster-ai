const AIAgent = require("../models/AIAgent");
const AIRules = require("../models/AIRules");
const AIVariables = require("../models/AIVariables");
const AIKnowledgeBase = require("../models/AIKnowledgeBase");

async function getAgentData(agent_id) {
  try {
    // 1Ô∏è‚É£ Obter informa√ß√µes b√°sicas do agente
    const agent = await AIAgent.findByPk(agent_id);
    if (!agent) throw new Error("Agente n√£o encontrado.");

    // 2Ô∏è‚É£ Obter regras do agente
    const rules = await AIRules.findAll({ where: { agent_id } });
    const rulesText = rules.map(rule => rule.rule_text).join("\n");

    // 3Ô∏è‚É£ Obter vari√°veis do agente
    const variables = await AIVariables.findAll({ where: { agent_id } });
    const variablesText = variables.map(v => `${v.key}: ${v.value}`).join("\n");

    // 4Ô∏è‚É£ Obter conhecimento armazenado (arquivos e fontes externas)
    const knowledge = await AIKnowledgeBase.findAll({ where: { agent_id } });

    // 5Ô∏è‚É£ Separar fontes internas (arquivos) e fontes externas (websites, APIs)
    const internalKnowledge = knowledge
      .filter(k => k.type === "file" && k.value)
      .map(k => k.value)
      .join("\n\n");

    // üìå Garantir que `externalSources` sempre seja um array v√°lido
    let externalSources = [];
    try {
      externalSources = knowledge
        .filter(k => k.type === "link" && k.value)
        .map(k => {
          try {
            return JSON.parse(k.value);
          } catch (jsonError) {
            console.warn(`‚ö†Ô∏è Erro ao converter JSON da fonte externa: ${k.value}`);
            return null;
          }
        })
        .filter(item => item !== null); // Remove entradas inv√°lidas
    } catch (error) {
      console.error("‚ùå Erro ao processar fontes externas:", error.message);
      externalSources = [];
    }

    // üîπ Garante que `externalSources` nunca ser√° undefined ou null
    if (!Array.isArray(externalSources)) {
      externalSources = [];
    }

    return {
      agent,
      rulesText,
      variablesText,
      internalKnowledge,
      externalSources
    };
  } catch (error) {
    console.error("‚ùå Erro ao obter dados do agente:", error.message);
    return null;
  }
}

module.exports = { getAgentData };